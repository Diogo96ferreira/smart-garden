import { NextResponse } from 'next/server';
import { GoogleGenAI } from '@google/genai';

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY as string });

export async function POST(req: Request) {
  try {
    const { context, question } = await req.json();

    if (!question || !context) {
      return NextResponse.json(
        { error: '√â necess√°ria uma pergunta e um contexto.' },
        { status: 400 },
      );
    }

    // üß© Passo 1: verificar se a pergunta ainda est√° relacionada com o contexto
    const checkPrompt = `
Est√°s a ajudar uma idosa chamada Tia Ad√©lia, que fala sobre plantas e hortas. 
Tens uma descri√ß√£o da planta anterior: "${context}".
A nova pergunta √©: "${question}".

Responde apenas com:
- "RELACIONADA" se a pergunta for claramente sobre a mesma planta ou tema;
- "NOVA" se o utilizador mudou de assunto (ou perguntou sobre outra planta).
`;

    const relevanceCheck = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: [{ text: checkPrompt }],
      config: { responseMimeType: 'text/plain' },
    });

    const relevance = relevanceCheck.text?.trim().toUpperCase() ?? 'RELACIONADA';

    if (relevance.includes('NOVA')) {
      const alternatives = [
        'At√£o... isso j√° me parece conversa doutro canteiro. Mostre-me uma fotografia, que assim √© mais certo üåø',
        'Olhe que isso j√° √© outra planta, n√£o √©? Traga-me uma foto dessa, para eu ver como est√°.',
        'Isso j√° √© outra hist√≥ria... mostre-me l√° a coisa para eu perceber do que fala üå±',
        'Hum... isso n√£o √© a mesma coisa de h√° pouco. Tire-me antes uma fotografia dessa planta, que eu vejo logo.',
        'Ora, j√° me est√° a mudar o assunto! Mostre-me antes uma fotografia, que assim √© mais f√°cil ajudar üçÉ',
        'Isso soa-me a outra conversa. Mostre-me l√° o que quer dizer, que com uma fotografia entendo logo.',
        'Ah, isso j√° n√£o √© da mesma horta. Envie-me uma foto dessa planta, que os olhos √© que sabem üåæ',
      ];

      const reply = alternatives[Math.floor(Math.random() * alternatives.length)];
      return NextResponse.json({ reply });
    }

    // ü™¥ Passo 2: gerar resposta normal (contexto coerente)
    const prompt = `
Assume a persona da **Tia Ad√©lia**, uma senhora alentejana de 93 anos que passou a vida toda no campo.
Fala sempre em **portugu√™s de Portugal** e nunca em ingl√™s.
√âs uma mulher pr√°tica, serena e s√°bia, com a calma de quem aprendeu a vida fazendo-a.
Falas como o povo da terra ‚Äî com carinho, simplicidade e aquele tom doce mas ao mesmo tempo distante e firme de quem j√° viu muita coisa nascer, crescer e murchar.
nao coloques texto relacionado com gestos

O teu discurso √© natural e pausado, cheio de pequenos gestos e express√µes do falar alentejano:
‚Äúdeixe-o crescer‚Äù, ‚Äút√° rijo‚Äù, ‚Äúa terra √© quem sabe‚Äù, entre outras.
Usas diminutivos com afeto (‚Äúlaranjinha‚Äù, ‚Äúraminho‚Äù, ‚Äúfolhinha‚Äù) e d√°s conselhos como quem ensina com as m√£os.
Quando explicas algo, fazes pausas, repetes com calma e corriges-te se precisares, como quem est√° a mostrar o que quer dizer.
responde no maximo com 200 palavras

A tua sabedoria vem da experi√™ncia, da observa√ß√£o e das gera√ß√µes anteriores.
Citas √†s vezes o teu pai ou a tua m√£e (‚Äúo meu pai dizia sempre...‚Äù), mostrando respeito pelas tradi√ß√µes.
Falas com humildade ‚Äî se n√£o sabes algo, dizes com naturalidade (‚Äún√£o sei o jeito de fazerem isto‚Äù), mas ofereces o que sabes de melhor.
√âs pr√°tica, afetuosa e honesta, sempre com um toque de humor e ternura. A planta analisada antes foi: "${context}".

**Instru√ß√µes para a resposta:**
1. Usa express√µes do Alentejo ("at√£o", "ora essa", "meu rico menino") e diminutivos ("folhinha", "raminho").
2. Responde de forma natural e em portugu√™s de Portugal.
3. Se a pergunta for amb√≠gua, responde com calma e pede para o utilizador explicar melhor.

Pergunta do utilizador: "${question}"
`;

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: [{ text: prompt }],
      config: { responseMimeType: 'text/plain' },
    });

    const rawText = response.text?.replace(/^[ \t\n\r]+|[ \t\n\r]+$/g, '');
    if (!rawText) throw new Error('A API retornou uma resposta vazia.');

    const reply = rawText;

    return NextResponse.json({ reply });
  } catch (error) {
    console.error('Erro no chat:', error);
    const msg = error instanceof Error ? error.message : 'Ocorreu um erro desconhecido.';
    return NextResponse.json({ error: `Erro no chat: ${msg}` }, { status: 500 });
  }
}
